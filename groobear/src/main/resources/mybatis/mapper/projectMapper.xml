<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.project.mapper.ProjectMapper">
	
	<select id="getDevTeamList" parameterType="map" resultType="com.sp.app.model.core.OrgUnit">
		SELECT teamIdx, t.deptIdx, teamName
		FROM team t
		LEFT OUTER JOIN department d ON t.deptIdx = d.deptIdx
		WHERE t.deptIdx = #{deptIdx}
	</select>
	
	<select id="getEmpNameListFromDevTeam" parameterType="map"
		resultType="com.sp.app.model.core.Member">
		SELECT empIdx, empName, deptIdx, teamIdx
		FROM employee e
		LEFT OUTER JOIN position p ON e.positionCode = p.positionCode
		WHERE deptIdx = #{deptIdx} AND teamIdx = #{teamIdx}
		ORDER BY p.positionCode ASC
	</select>
	
	<select id="getEmployList" parameterType="map" 
		resultType="com.sp.app.model.core.Member">
	    SELECT empIdx, empName, (teamName || ' ' || positionName) AS orgUnitName, teamName
	    FROM employee e
	    LEFT OUTER JOIN team t ON e.teamIdx = t.teamIdx
	    LEFT OUTER JOIN position p ON e.positionCode = p.positionCode
	    WHERE t.deptIdx = 'F'
	        AND (empName LIKE '%' || #{searchKwd} || '%'
	        OR teamName LIKE '%' || #{searchKwd} || '%'
	        OR empTel LIKE '%' || #{searchKwd} || '%')
	        AND NOT EXISTS (
	            SELECT 1
	            FROM projectMember pm
	            WHERE pm.projIdx = #{projIdx} 
	            AND pm.empIdx = e.empIdx
	        )
	    ORDER BY empName ASC
	</select>
	
	
	<!-- PROJECT 테이블 -->
	
	<select id="projectSeq" resultType="Long">
		SELECT project_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertProject" parameterType="com.sp.app.project.model.Project">
		INSERT INTO project(projIdx, pmEmpIdx, projName, createdAt, startDate, endDate, status)
		VALUES(#{projIdx}, #{pmEmpIdx}, #{projName}, SYSDATE, #{startDate}, #{endDate}, 0)
	</insert>
	
	<update id="updateProject" parameterType="com.sp.app.project.model.Project">
		UPDATE project SET pmEmpIdx=#{pmEmpIdx}, projName=#{projName}, 
			startDate=#{startDate}, endDate=#{endDate}
		WHERE projIdx=#{projIdx}
	</update>
	
	<delete id="deleteProject" parameterType="com.sp.app.project.model.Project">
		DELETE FROM project
		WHERE projIdx=#{projIdx}
	</delete>
	
	<select id="getProjectList" parameterType="map"
		resultType="com.sp.app.project.model.Project">
		SELECT p.projIdx, projName, p.pmEmpIdx, e.empName AS pmEmpName,
			e.empIdx, e.empName,
			TO_CHAR(createdAt, 'YYYY-MM-DD') createdAt, 
			TO_CHAR(startDate, 'YYYY-MM-DD') startDate,  
			TO_CHAR(endDate, 'YYYY-MM-DD') endDate
		FROM project p
		LEFT JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				AND (INSTR(p.projName, #{kwd}) &gt; 0)
			</if>
			<if test="status != null and status !=''">
				AND status = #{status}
			</if>				
		</where>
		ORDER BY projIdx ASC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	<select id="getProjectCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(projIdx), 0)
		FROM project p
		JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				AND (INSTR(p.projName, #{kwd}) &gt; 0)
			</if>
			<if test="status != null">
				AND status = #{status}
			</if>				
		</where>
	</select>
	
	
	<select id="getProjectById" parameterType="Long" resultType="com.sp.app.project.model.Project">
		SELECT p.projIdx, p.pmEmpIdx, pm.empName AS pmEmpName, t.teamName AS pmTeamName, p.projName,
			TO_CHAR(p.startDate, 'YYYY-MM-DD') AS startDate, TO_CHAR(p.endDate, 'YYYY-MM-DD') AS endDate,
			t.teamIdx AS pmTeamIdx 
		FROM project p
		LEFT OUTER JOIN employee pm ON p.pmEmpIdx = pm.empIdx
		LEFT OUTER JOIN team t ON pm.teamIdx = t.teamIdx
		WHERE projIdx=#{projIdx}
	</select>
	
	<select id="getPmEmpIdx" parameterType="Long" resultType="Long">
		SELECT e.empIdx
		FROM project p
		JOIN employee e ON p.pmEmpIdx = e.empIdx
		WHERE p.projIdx = #{projIdx}
	</select>
	
</mapper>