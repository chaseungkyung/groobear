<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.ProjectMapper">

	<insert id="insertProject" parameterType="com.sp.app.model.project.Project">
		INSERT INTO project(projIdx, pmEmpIdx, projName, createdAt, startDate, endDate, status)
		VALUES(project_seq.NEXTVAL, #{pmEmpIdx}, #{projName}, SYSDATE, #{startDate}, #{endDate}, 0)
	</insert>
	
	<select id="getDevTeamList" parameterType="map" resultType="com.sp.app.model.core.OrgUnit">
		SELECT teamIdx, t.deptIdx, teamName
		FROM team t
		LEFT OUTER JOIN department d ON t.deptIdx = d.deptIdx
		WHERE t.deptIdx = #{deptIdx}
	</select>
	
	<select id="getEmpNameListFromDevTeam" parameterType="map"
		resultType="com.sp.app.model.core.Member">
		SELECT empIdx, empName, deptIdx, teamIdx
		FROM employee
		WHERE deptIdx = #{deptIdx} AND teamIdx = #{teamIdx}
	</select>
	
	
	<select id="getProjectCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(projIdx), 0)
		FROM project p
		JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				(INSTR(projName, #{kwd}) &gt; 0)
			</if>
		</where>
	</select>
	
	<select id="getProjectList" parameterType="map"
		resultType="com.sp.app.model.project.Project">
		SELECT p.projIdx, projName, pmEmpIdx, e.empName AS pmEmpName,
			TO_CHAR(createdAt, 'YYYY-MM-DD') createdAt, 
			TO_CHAR(startDate, 'YYYY-MM-DD') startDate,  
			TO_CHAR(endDate, 'YYYY-MM-DD') endDate
		FROM project p
		JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				(INSTR(projName, #{kwd}) &gt; 0)
			</if>
			
			<choose>		
				<when test="pmEmpIdx != null">
               	 	AND pmEmpIdx = #{pmEmpIdx}
            	</when>
			</choose>			
		</where>
		ORDER BY projIdx DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	
	<select id="getProjectById" parameterType="Long" resultType="com.sp.app.model.project.Project">
		SELECT p.projIdx, p.pmEmpIdx, pm.empName AS pmEmpName, t.teamName AS pmTeamName,
			p.projName, p.startDate, p.endDate 
		FROM project p
		LEFT OUTER JOIN employee pm ON p.pmEmpIdx = pm.empIdx
		LEFT OUTER JOIN team t ON pm.teamIdx = t.teamIdx
		WHERE projIdx=#{projIdx}
	</select>
	
	
	<update id="updateProject" parameterType="com.sp.app.model.project.Project">
		UPDATE project SET pmEmpIdx=#{pmEmpIdx}, projName=#{projName}, 
			startDate=#{startDate}, endDate=#{endDate}
		WHERE projIdx=#{projIdx}
	</update>
	
	<delete id="deleteProject" parameterType="com.sp.app.model.project.Project">
		DELETE FROM project
		WHERE projIdx=#{projIdx}
	</delete>
	
	
	<!-- 프로젝트 멤버 테이블 -->
	<insert id="insertProjectMember" parameterType="com.sp.app.model.project.ProjectMember">
		INSERT INTO projectMember(projMemberIdx, projIdx, empIdx, projTeamIdx)
		VALUES(projectMember_seq.NEXTVAL, #{projIdx}, #{empIdx}, #{projTeamIdx})
	</insert>
	
	
	<delete id="deleteProjectMember" parameterType="com.sp.app.model.project.ProjectMember">
		DELETE FROM projectMember
		WHERE projMemberIdx=#{projMemberIdx}
	</delete>
	
	<select id="getProjectMemberList" parameterType="map" resultType="com.sp.app.model.project.ProjectMember">
		SELECT projMemberIdx, projIdx, e.empIdx, pt.projTeamIdx, pt.projTeamName
		FROM projectMember pmb
		LEFT OUTER JOIN projectTeam pt ON pmb.projTeamIdx = pt.projTeamIdx
		LEFT OUTER JOIN employee e ON pmb.empIdx = e.empIdx
		WHERE projMemberIdx = #{projMemberIdx}
	</select>
	
	<select id="getProjectMemberCount" parameterType="map" resultType="Integer">
		SELECT NVL(count(projMemberIdx),0)
		FROM projectMember
	</select>
	
	
	<!-- PROJECTSTAGE 테이블 -->
	

</mapper>