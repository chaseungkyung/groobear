<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.ProjectMapper">

	<select id="getDevTeamList" parameterType="map" resultType="com.sp.app.model.core.OrgUnit">
		SELECT teamIdx, t.deptIdx, teamName
		FROM team t
		LEFT OUTER JOIN department d ON t.deptIdx = d.deptIdx
		WHERE t.deptIdx = #{deptIdx}
	</select>
	
	<select id="getEmpNameListFromDevTeam" parameterType="map"
		resultType="com.sp.app.model.core.Member">
		SELECT empIdx, empName, deptIdx, teamIdx
		FROM employee e
		LEFT OUTER JOIN position p ON e.positionCode = p.positionCode
		WHERE deptIdx = #{deptIdx} AND teamIdx = #{teamIdx}
		ORDER BY p.positionCode ASC
	</select>
	
	<select id="getEmployList" parameterType="map" 
		resultType="com.sp.app.model.core.Member">
	    SELECT empIdx, empName, (teamName || ' ' || positionName) AS orgUnitName
	    FROM employee e
	    LEFT OUTER JOIN team t ON e.teamIdx = t.teamIdx
	    LEFT OUTER JOIN position p ON e.positionCode = p.positionCode
	    WHERE t.deptIdx = 'F'
	        AND (empName LIKE '%' || #{searchKwd} || '%'
	        OR teamName LIKE '%' || #{searchKwd} || '%'
	        OR empTel LIKE '%' || #{searchKwd} || '%')
	        AND NOT EXISTS (
	            SELECT 1
	            FROM projectMember pm
	            WHERE pm.projIdx = #{projIdx} 
	            AND pm.empIdx = e.empIdx
	        )
	    ORDER BY empName ASC
	</select>
	
	
	<!-- PROJECT 테이블 -->

	<insert id="insertProject" parameterType="com.sp.app.model.project.Project">
		INSERT INTO project(projIdx, pmEmpIdx, projName, createdAt, startDate, endDate, status)
		VALUES(project_seq.NEXTVAL, #{pmEmpIdx}, #{projName}, SYSDATE, #{startDate}, #{endDate}, 0)
	</insert>
	
	<update id="updateProject" parameterType="com.sp.app.model.project.Project">
		UPDATE project SET pmEmpIdx=#{pmEmpIdx}, projName=#{projName}, 
			startDate=#{startDate}, endDate=#{endDate}
		WHERE projIdx=#{projIdx}
	</update>
	
	<delete id="deleteProject" parameterType="com.sp.app.model.project.Project">
		DELETE FROM project
		WHERE projIdx=#{projIdx}
	</delete>
	
	<select id="getProjectList" parameterType="map"
		resultType="com.sp.app.model.project.Project">
		SELECT p.projIdx, projName, p.pmEmpIdx, e.empName AS pmEmpName,
			e.empIdx, e.empName,
			TO_CHAR(createdAt, 'YYYY-MM-DD') createdAt, 
			TO_CHAR(startDate, 'YYYY-MM-DD') startDate,  
			TO_CHAR(endDate, 'YYYY-MM-DD') endDate
		FROM project p
		LEFT JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				(INSTR(p.projName, #{kwd}) &gt; 0)
			</if>
			<if test="status != null and status !=''">
				status = #{status}
			</if>				
		</where>
		ORDER BY projIdx ASC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	<select id="getProjectCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(projIdx), 0)
		FROM project p
		JOIN employee e ON p.pmEmpIdx = e.empIdx
		<where>
			<if test="kwd != null and kwd !=''">
				(INSTR(p.projName, #{kwd}) &gt; 0)
			</if>
			<if test="status != null">
				status = #{status}
			</if>				
		</where>
	</select>
	
	
	<select id="getProjectById" parameterType="Long" resultType="com.sp.app.model.project.Project">
		SELECT p.projIdx, p.pmEmpIdx, pm.empName AS pmEmpName, t.teamName AS pmTeamName, p.projName,
			TO_CHAR(p.startDate, 'YYYY-MM-DD') AS startDate, TO_CHAR(p.endDate, 'YYYY-MM-DD') AS endDate,
			t.teamIdx AS pmTeamIdx 
		FROM project p
		LEFT OUTER JOIN employee pm ON p.pmEmpIdx = pm.empIdx
		LEFT OUTER JOIN team t ON pm.teamIdx = t.teamIdx
		WHERE projIdx=#{projIdx}
	</select>
	
	
	<!-- projectTeam 테이블 -->
	
	<insert id="insertProjectTeam" parameterType="com.sp.app.model.project.ProjectTeam">
		INSERT INTO projectTeam (projTeamIdx, projIdx, projTeamName)
		VALUES (projectTeam_seq.NEXTVAL, projIdx=#{projIdx}, projTeamName=#{projTeamName})
	</insert>
	
	<update id="updateProjectTeam" parameterType="com.sp.app.model.project.ProjectTeam">
		UPDATE projectTeam SET projTeamName=#{projTeamName}
	</update>
	
	<delete id="deleteProjectTeam" parameterType="Long">
		DELETE FROM projectTeam
		WHERE projTeamIdx=#{projTeamIdx}
	</delete>
	
	<select id="getProjectTeamList" parameterType="Long" resultType="com.sp.app.model.project.ProjectTeam">
		SELECT projTeamIdx, projTeamName
		FROM projectTeam
		WHERE projIdx=#{projIdx}
		ORDER BY projTeamName ASC
	</select>
	
	
	<!-- projectMember 테이블 -->
	
	<insert id="insertProjectMember" parameterType="com.sp.app.model.project.ProjectMember">
		INSERT INTO projectMember(projMemberIdx, projIdx, empIdx, projTeamIdx)
		VALUES(projectMember_seq.NEXTVAL, #{projIdx}, #{empIdx}, #{projTeamIdx})
	</insert>
	
	<update id="updateProjectMember" parameterType="com.sp.app.model.project.ProjectMember">
		UPDATE projectMember SET projTeamIdx=#{projTeamIdx}
		WHERE projMemberIdx = #{projMemberIdx}
	</update>
	
	<delete id="deleteProjectMember" parameterType="Long">
		DELETE FROM projectMember
		WHERE projMemberIdx=#{projMemberIdx}
	</delete>
	
	<select id="getProjectMemberList" parameterType="map" resultType="com.sp.app.model.project.ProjectMember">
		SELECT pmb.projMemberIdx, pmb.projIdx, e.empIdx, e.empName, pt.projTeamIdx, pt.projTeamName
		FROM projectMember pmb
		LEFT OUTER JOIN projectTeam pt ON pmb.projTeamIdx = pt.projTeamIdx
		LEFT OUTER JOIN employee e ON pmb.empIdx = e.empIdx
		<where>
			<if test="projIdx != null"> pmb.projIdx = #{projIdx} </if>
			<if test="projTeamIdx != null"> pmb.projTeamIdx = #{projTeamIdx} </if>
		</where>
	</select>
	
	<select id="getProjectMemberCount" parameterType="map" resultType="Integer">
		SELECT NVL(count(projMemberIdx),0)
		FROM projectMember
		<where>
			<if test="projIdx != null"> projIdx = #{projIdx} </if>
			<if test="projTeamIdx != null"> projTeamIdx = #{projTeamIdx} </if>
		</where>
	</select>
	

	
	
	<!-- projectStage 테이블 -->
	
	<insert id="insertProjectStage" parameterType="com.sp.app.model.project.ProjectStage">
		INSERT INTO projectStage(stageIdx, projIdx, stageName, status, 
			startDate, endDate, createdAt, projTeamIdx, projTeamName, content)
		VALUES(projectStage_seq.NEXTVAL, #{projIdx}, #{stageName}, #{status},
			#{startDate}, #{endDate}, SYSDATE, #{projTeamIdx}, 
			#{projTeamName, jdbcType=VARCHAR}, #{content, jdbcType=VARCHAR})
	</insert>
	
	<update id="updateProjectStage" parameterType="com.sp.app.model.project.ProjectStage">
		UPDATE projectStage SET stageName=#{stageName}, status=#{status},
			startDate=#{startDate}, endDate=#{endDate}, projTeamIdx=#{projTeamIdx},
			projTeamName=#{projTeamName}, content=#{content}
	</update>
	
	<delete id="deleteProjectStage" parameterType="Long">
		DELETE FROM projectStage
		WHERE stageIdx = #{stageIdx}
	</delete>
	
	<select id="getProjectStageList" parameterType="map" resultType="com.sp.app.model.project.ProjectStage">
		SELECT ps.stageIdx, ps.projIdx, ps.stageName, ps.status, 
			ps.startDate, ps.endDate, ps.createdAt, ps.projTeamIdx, 
			COALESCE(pt.projTeamName, '미배정') AS projTeamName, ps.content
		FROM projectStage ps
		LEFT JOIN projectTeam pt ON ps.projTeamIdx = pt.projTeamIdx
		<where>
			<if test="projIdx != null"> ps.projIdx = #{projIdx} </if>
		</where>
		ORDER BY startDate ASC
	</select>
	
	<select id="getProjectStageCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(stageIdx), 0)
		FROM projectStage
		<where>
			1=1
			<if test="projIdx != null"> AND projIdx = #{projIdx} </if>
			<if test="status != null"> AND status = #{status} </if>
		</where>
	</select>
	
	<select id="getProjectStageById" parameterType="Long" resultType="com.sp.app.model.project.ProjectStage">
		SELECT stageIdx, projIdx, stageName, status, startDate, endDate, createdAt, 
			projTeamIdx, projTeamName, content
		FROM projectStage
		WHERE stageIdx = #{stageIdx}
	</select>
	
	
	<!-- projectTask 테이블 -->
	
	<insert id="insertProjectTask" parameterType="com.sp.app.model.project.ProjectTask">
		INSERT INTO projectTask(taskIdx, stageIdx, taskName, status, 
			startDate, endDate, createdAt, content)
		VALUES(projectTask_seq.NEXTVAL, #{stageIdx}, #{taskName}, #{status}, 
			#{startDate}, #{endDate}, SYSDATE, #{content})	
	</insert>
	
	<update id="updateProjectTask" parameterType="com.sp.app.model.project.ProjectTask">
		UPDATE projectTask SET taskName=#{taskName}, status=#{status},
			startDate=#{startDate}, endDate=#{endDate}, content=#{content}
		WHERE taskIdx=#{taskIdx}
	</update>
	
	<delete id="deleteProjectTask" parameterType="Long">
		DELETE FROM projectTask
		WHERE taskIdx=#{taskIdx}
	</delete>
	
	<!-- stage 의 하위 task 리스트 -->
	<select id="getProjectTaskList" parameterType="map" 
		resultType="com.sp.app.model.project.ProjectTask">
		SELECT pt.taskIdx, ps.stageIdx, pt.taskName, pt.status, 
			pt.startDate, pt.endDate, pt.createdAt, pt.content
		FROM projectTask pt
		LEFT JOIN projectStage ps ON pt.stageIdx = ps.stageIdx
		LEFT JOIN project p ON ps.projIdx = p.projIdx
		<where>
			<if test="projIdx != null"> p.projIdx = #{projIdx}</if>
			<if test="stageIdx != null">ps.stageIdx = #{stageIdx}</if>
			<if test="status != null"> pt.status = #{status} </if>
		</where>
		ORDER BY startDate ASC
	</select>
	
	<select id="getProjectTaskCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(taskIdx), 0)
		FROM projectTask pt
		LEFT JOIN projectStage ps ON pt.stageIdx = ps.stageIdx
		LEFT JOIN project p ON ps.projIdx = p.projIdx
		<where>
			1=1
			<if test="projIdx != null"> AND p.projIdx = #{projIdx}</if>
			<if test="stageIdx != null"> AND ps.stageIdx = #{stageIdx}</if>
			<if test="status != null"> AND pt.status = #{status} </if>
		</where>
	</select>
	
	<select id="getProjectTaskById" parameterType="Long" 
		resultType="com.sp.app.model.project.ProjectTask">
		SELECT pt.taskIdx, ps.stageIdx, pt.taskName, pt.status, pt.startDate, 
			pt.endDate, pt.createdAt, pt.content, ps.stageName
		FROM projectTask pt
		LEFT JOIN projectStage ps ON pt.stageIdx = ps.stageIdx
		WHERE taskIdx = #{taskIdx}
	</select>
	
	
	
	<!-- projectPost 테이블 -->
	
	<insert id="insertProjectPost" parameterType="com.sp.app.model.project.ProjectPost">
		INSERT INTO projectPost(postIdx, projIdx, projMemberIdx, title, content, regDate)
		VALUES (projectPost_seq.NEXTVAL, #{projIdx}, #{projMemberIdx}, 
			#{title}, #{content}, SYSDATE)
	</insert>
	
	<update id="updateProjectPost" parameterType="com.sp.app.model.project.ProjectPost">
		UPDATE projectPost SET title=#{title}, content=#{content}, updateDate=SYSDATE
		WHERE postIdx=#{postIdx}
	</update>
	
	<delete id="deleteProjectPost" parameterType="com.sp.app.model.project.ProjectPost">
		DELETE FROM projectPost WHERE postIdx = #{postIdx}
	</delete>
	
	<select id="getProjectPostList" parameterType="map" resultType="com.sp.app.model.project.ProjectPost">
        SELECT pp.postIdx, p.projIdx, pm.projMemberIdx, e.empIdx, e.empName, 
			title, content, regDate, updateDate
		FROM projectPost pp
        LEFT JOIN project p ON pp.projIdx = p.projIdx
        LEFT JOIN projectMember pm ON pp.projMemberIdx = pm.projMemberIdx
        LEFT JOIN employee e ON pm.empIdx = e.empIdx
        ORDER BY pp.postIdx DESC
	</select>
	
	<select id="getProjectPostCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(postIdx), 0) FROM projectPost
	</select>
	
	<select id="getProjectPostById" parameterType="Long" resultType="com.sp.app.model.project.ProjectPost">
		SELECT pp.postIdx, p.projIdx, pm.projMemberIdx, e.empIdx, e.empName, 
			title, content, regDate, updateDate
		FROM projectPost pp
        LEFT JOIN project p ON pp.projIdx = p.projIdx
        LEFT JOIN projectMember pm ON pp.projMemberIdx = pm.projMemberIdx
        LEFT JOIN employee e ON pm.empIdx = e.empIdx
        WHERE postIdx = #{postIdx} 
	</select>
	
	

</mapper>