<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.MemberMapper">

	<select id="getLastEmpCode" resultType="String">
		SELECT empCode
		FROM employee
		WHERE empCode LIKE CONCAT(#{empCode}, '%')
		ORDER BY empCode DESC FETCH FIRST 1 ROWS ONLY
	</select>
	
	<select id="listDepartment" resultType="com.sp.app.model.Member">
		SELECT deptIdx, deptName
		FROM department
	</select>
	
	<select id="listTeam" resultType="com.sp.app.model.Member">
		SELECT teamIdx, t.deptIdx, teamName
		FROM team t
		LEFT OUTER JOIN department d ON t.deptIdx = d.deptIdx
		WHERE t.deptIdx = #{deptIdx, jdbcType=NUMERIC}
	</select>
	
	<select id="listPosition" resultType="com.sp.app.model.Member">
		SELECT positionCode, positionName, parentCode
		FROM position
	</select>

	<insert id="insertEmployee" parameterType="com.sp.app.model.Member">
		<selectKey keyProperty="empIdx" resultType="java.lang.Long" order="BEFORE">
	        SELECT employee_seq.NEXTVAL FROM DUAL
	    </selectKey>
		INSERT INTO Employee(empIdx, empCode, empName, empPwd, deptIdx, teamIdx, positionCode, empTel, hireDate, empStatus)
		VALUES (#{empIdx}, #{empCode}, #{empName}, #{empPwd}, #{deptIdx, jdbcType=VARCHAR}, #{teamIdx, jdbcType=VARCHAR}, #{positionCode, jdbcType=VARCHAR}, #{empTel}, #{hireDate}, 0)
	</insert>
	
	<insert id="insertEmployeeDetail" parameterType="com.sp.app.model.Member">
		INSERT INTO EmployeeDetail(empIdx, birth, email, tel, zipCode, addrMain, addrSub, rrn)
		VALUES (#{empIdx}, #{birth}, #{email}, #{tel}, #{zipCode}, #{addrMain}, #{addrSub}, #{rrn})
	</insert>


	<update id="updateLastLogin" parameterType="com.sp.app.model.Member">
	 	UPDATE EmployeeDetail SET lastLogin= #{lastLogin}
		WHERE empIdx = #{empIdx}
	</update>
	
	<update id="updateMemberStatus" parameterType="map">
	 	UPDATE EmployeeDetail SET empStatus= #{empStatus}
		WHERE empIdx = #{empIdx}
	</update>

	<update id="updateEmployee" parameterType="com.sp.app.model.Member">
		UPDATE Employee e JOIN EmployeeDetail d ON d.empIdx = e.empIdx
		SET e.deptIdx = #{deptIdx}, e.teamIdx= #{teamIdx}, e.positionCode= #{positionCode}, e.empTel= #{empTel}, d.email= #{email}, e.hireDate=#{hireDate}, e.retireDate=#{retireDate}, d.rrn = #{rrn}, d.tel= #{tel}, d.addrMain=#{addrMain}, d.addrSub=#{addrSub}, e.empStatus=#{empStatus} 
		WHERE empIdx = #{empIdx}
	</update>

	
	<select id="findByEmpIdx" parameterType="Long" resultType="com.sp.app.model.Member" >
		select e.empIdx, e.empCode, e.empName, e.empPwd, e.deptIdx, e.teamIdx, e.positionCode, e.emptel, e.empStatus, 
				TO_CHAR(e.hiredate, 'YYYY-MM-DD') hireDate, TO_CHAR(e.retiredate,'YYYY-MM-DD') retiredate, d.deptName, t.teamName, p.positionName, ed.tel, SUBSTR(ed.email, 1, INSTR(ed.email, '@') -1) AS email, ed.addrmain, ed.addrSub, ed.zipcode, ed.rrn
		from employee e
        left outer join employeedetail ed ON ed.empIdx = e.empIdx
		left outer join department d ON d.deptidx = e.deptidx
		left outer join team t On t.teamidx = e.teamidx
		left outer join position p ON p.positionCode = e.positioncode
		WHERE e.empIdx = #{empIdx}
	</select>
		
	<select id="findByEmpCode" parameterType="String" resultType="com.sp.app.model.Member" >
		select empIdx, empCode, empName, empPwd, e.deptIdx, e.teamIdx, e.positionCode, emptel, empStatus, 
				hiredate, retiredate, lastlogin, loginfails, d.deptName, t.teamName, p.positionName
		from employee e
		left outer join department d ON d.deptidx = e.deptidx
		left outer join team t On t.teamidx = e.teamidx
		left outer join position p ON p.positionCode = e.positioncode
		WHERE empCode = #{empCode} AND empStatus = 0
		ORDER BY empCode DESC	
	</select>
			
	<select id="listMemberAll" resultType="com.sp.app.model.Member">
		SELECT empIdx, empCode, empName, deptIdx, teamIdx, positionCode, empTel 
		FROM employee
	</select>
	
	<select id="listMember" parameterType="map" resultType="com.sp.app.model.Member">
		select e.empidx, empCode, empname, e.deptidx, e.teamidx, e.positioncode, emptel, empstatus, tel, email,
				TO_CHAR(hiredate, 'YYYY-MM-DD') hiredate, retiredate, d.deptName, t.teamName, p.positionName
		from employee e
		left outer JOIN employeedetail ed ON e.empIdx = ed.empIdx
		left outer join department d ON d.deptidx = e.deptidx
		left outer join team t On t.teamidx = e.teamidx
		left outer join position p ON p.positionCode = e.positioncode
		ORDER BY empCode DESC
	</select>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) AS dataCount
		FROM employee e
		JOIN employeedetail d ON e.empIdx = d.empIdx
	</select>
	
</mapper>